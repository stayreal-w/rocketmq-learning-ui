---
import { type CollectionEntry, getCollection } from "astro:content";
import BlogPost from "@components/markdownSet/MarkdownDetail.astro";
import TocComponent from "@components/markdownSet/TocComponents/TocComponent.astro";
import BaseLayout from "@layouts/BaseLayout.astro";
import Sidebar from "@components/starlight/Sidebar.astro";
import { useTranslations } from "@i18n/util";
import { SITE } from "@utils/config";
import Pagination from "@astrojs/starlight/components/Pagination.astro";

const t = useTranslations(Astro);

// 教程页所有tag
export const ALL_COURSE_TAG = [
  {
    type: "group",
    label: "基础学习资料",
    category: "baseLearn",
    entries: [],
  },
  {
    type: "group",
    label: "版本",
    category: "version",
    entries: [],
  },
  {
    type: "group",
    label: "部署",
    category: "deploy",
    entries: [],
  },
];

export async function getStaticPaths() {
  const posts = await getCollection("course");
  const allTags = ALL_COURSE_TAG.map((item) => item.category);

  return allTags.flatMap((tag) => {
    const filteredPosts = posts.filter((post) =>
      post.data?.tags?.includes(tag)
    );
    return filteredPosts.map((post) => ({
      params: { tag: tag, slug: post.slug },
      props: post,
    }));
  });
}

type Props = CollectionEntry<"blog">;

const post = Astro.props;

const { Content, headings } = await post.render();

const posts = await getCollection("course");

const sortedPosts = posts.sort(
  (a, b) => new Date(b.data.date).valueOf() - new Date(a.data.date).valueOf()
);

const currentPostId = post.id;

ALL_COURSE_TAG.forEach((a) => {
  const tagEntries = [];
  sortedPosts.forEach((item, index) => {
    if (item.data.tags.includes(a.category)) {
      let isCurrent = false;
      if (item.id === currentPostId) {
        isCurrent = true;
      }
      const existingEntry = a.entries.find(
        (entry) => entry.label === item.data.title
      );
      if (!existingEntry) {
        // 不存在则创建新的entry
        tagEntries.push({
          id: item.id,
          type: "link",
          label: item.data.title,
          href: `/course/${a.category}/${item.slug}/`,
          isCurrent: isCurrent,
          attrs: {},
        });
      } else {
        // 已存在则仅标记isCurrent
        existingEntry.isCurrent = isCurrent;
        tagEntries.push(existingEntry);
      }
    }
  });
  a.entries = tagEntries; // 覆盖原始entries以避免重复
});

const entries = ALL_COURSE_TAG.flatMap((item) => item.entries);
// 找到当前文章在排序后的文章列表中的位置
const currentIndex = entries.findIndex((item) => item.id === currentPostId);
const prev = currentIndex > 0 ? entries[currentIndex - 1] : null;
const next =
  currentIndex < entries.length - 1 ? entries[currentIndex + 1] : null;
const baseLayout_title = post?.data?.title || `${SITE.name} Blog`;
---

<span class="blog-slug-wrapper">
  <BaseLayout align="docs" title={baseLayout_title}>
    <div class="bg-base-100 text-content">
      <div
        class="w-[20%] sidebar-content fixed overflow-auto h-full hidden 2xl:inline-block xl:inline-block lg:inline-block md:inline-block"
      >
        <Sidebar sidebar={ALL_COURSE_TAG} />
      </div>
      <div
        class="w-full 2xl:ml-[20%] xl:ml-[20%] lg:ml-[20%] md:ml-[20%] 2xl:w-[60%] xl:w-[60%] lg:w-[80%] md:w-[80%] inline-block"
      >
        <!-- <div id="back-btn-learning" class="pt-4 pl-6">
          <Button variant="secondary" target="_self" class="rounded-3xl">
            <Icon name="left-arrow" class="text-lg align-middle" />
            <span class="ml-0.5">BACK</span>
          </Button>
        </div> -->
        <BlogPost {...post.data}>
          <Content />
        </BlogPost>
        <div class="pb-6">
          {
            (prev || next) && (
              <Pagination
                labels={{
                  "page.previousLink": t("commmon.base.page.previousLink"),
                  "page.nextLink": t("commmon.base.page.nextLink"),
                }}
                pagination={{
                  prev: prev,
                  next: next,
                }}
              />
            )
          }
        </div>
      </div>
      <div
        class="right-sidebar-panel overflow-y-auto w-[18%] fixed h-full hidden 2xl:inline-block xl:inline-block"
      >
        <TocComponent headings={headings} />
      </div>
    </div>
  </BaseLayout>
</span>
<!-- <script>
  function addBackBtnClick() {
    const url = new URL(window.location.href);
    let source = url.searchParams.get("source");
    if (source) {
      source = source.replace(/_/g, "/");
    }
    const backBtn: HTMLAnchorElement = document.querySelector(
      "#back-btn-learning a"
    );
    if (backBtn) {
      backBtn.onclick = (e) => {
        e.preventDefault();
        const params = new URLSearchParams(window.location.search);
        params.delete("source");

        let newPathname = "";
        if (source && source !== "undefined") {
          if (source === "home") {
            newPathname = "/";
          } else {
            newPathname = `/${source}/`;
          }
        } else {
          newPathname = "/learning/";
        }
        const newUrl = `${newPathname}?${params.toString()}`;

        window.location.href = newUrl;
      };
    }
  }
  document.addEventListener("astro:page-load", addBackBtnClick);
  document.addEventListener("DOMContentLoaded", addBackBtnClick);
</script> -->

<style is:global>
  .blog-slug-wrapper {
    .sidebar-content {
      height: calc(100% - 5rem);
      padding: 1rem var(--sl-sidebar-pad-x) 0;
      flex-direction: column;
      gap: 1rem;
    }
    .right-sidebar-panel {
      flex-direction: column;
      justify-content: space-between;
      height: calc(100vh - 3.5rem);
      padding: 1rem var(--sl-sidebar-pad-x);
    }
    .right-sidebar-panel h2 {
      color: theme("colors.model");
      font-size: var(--sl-text-base);
      font-weight: 600;
      line-height: var(--sl-line-height-headings);
      margin-bottom: 0.5rem;
    }
    .right-sidebar-panel a {
      display: block;
      font-size: var(--sl-text-xs);
      text-decoration: none;
      color: theme("colors.content");
      overflow-wrap: anywhere;
    }
    .right-sidebar-panel a:hover {
      color: theme("colors.model");
    }
    .pagination-links a {
      border: 1px solid var(--sl-color-gray-4);
      color: theme("colors.content");
    }

    .pagination-links a:hover {
      border-color: theme("colors.model");
    }

    .pagination-links .link-title {
      color: theme("colors.content");
    }
  }
</style>
